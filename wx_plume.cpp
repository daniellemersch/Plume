///////////////////////////////////////////////////////////////////////////// C++ code generated with wxFormBuilder (version Sep 12 2010)// http://www.wxformbuilder.org///// PLEASE DO "NOT" EDIT THIS FILE!///////////////////////////////////////////////////////////////////////////#include "wx_plume.h"///////////////////////////////////////////////////////////////////////////MainWindow::MainWindow( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxBoxSizer* bSizer3;	bSizer3 = new wxBoxSizer( wxVERTICAL );		wxBoxSizer* bSizer6;	bSizer6 = new wxBoxSizer( wxVERTICAL );		m_toolBar1 = new wxToolBar( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTB_HORIZONTAL ); 	m_toolBar1->Realize();		bSizer6->Add( m_toolBar1, 0, wxEXPAND, 5 );		bSizer3->Add( bSizer6, 1, wxEXPAND, 5 );		wxBoxSizer* bSizer51;	bSizer51 = new wxBoxSizer( wxVERTICAL );		m_bitmap1 = new wxStaticBitmap( this, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxSize( 912,609 ), 0 );	bSizer51->Add( m_bitmap1, 0, wxALL, 5 );		bSizer3->Add( bSizer51, 24, wxEXPAND, 5 );		this->SetSizer( bSizer3 );	this->Layout();	m_menubar3 = new wxMenuBar( 0 );	m_menu1 = new wxMenu();	wxMenuItem* m_menuItem1;	m_menuItem1 = new wxMenuItem( m_menu1, wxID_ANY, wxString( wxT("Load image ...") ) + wxT('\t') + wxT("CTRL+I"), wxEmptyString, wxITEM_NORMAL );	m_menu1->Append( m_menuItem1 );		wxMenuItem* m_menuItem5;	m_menuItem5 = new wxMenuItem( m_menu1, wxID_ANY, wxString( wxT("Load plume file ...") ) + wxT('\t') + wxT("CTRL+O"), wxEmptyString, wxITEM_NORMAL );	m_menu1->Append( m_menuItem5 );		wxMenuItem* m_menuItem4;	m_menuItem4 = new wxMenuItem( m_menu1, wxID_ANY, wxString( wxT("Save as image ...") ) + wxT('\t') + wxT("CTRL+S"), wxEmptyString, wxITEM_NORMAL );	m_menu1->Append( m_menuItem4 );		wxMenuItem* m_menuItem3;	m_menuItem3 = new wxMenuItem( m_menu1, wxID_ANY, wxString( wxT("Save as plume file ...") ) + wxT('\t') + wxT("CTRL+P"), wxEmptyString, wxITEM_NORMAL );	m_menu1->Append( m_menuItem3 );		wxMenuItem* m_separator1;	m_separator1 = m_menu1->AppendSeparator();		wxMenuItem* quit;	quit = new wxMenuItem( m_menu1, wxID_EXIT, wxString( wxT("Exit") ) , wxEmptyString, wxITEM_NORMAL );	m_menu1->Append( quit );		m_menubar3->Append( m_menu1, wxT("File") ); 		m_menu2 = new wxMenu();	wxMenuItem* m_menuItem6;	m_menuItem6 = new wxMenuItem( m_menu2, wxID_ANY, wxString( wxT("Delete color zones") ) , wxEmptyString, wxITEM_NORMAL );	m_menu2->Append( m_menuItem6 );		wxMenuItem* m_menuItem7;	m_menuItem7 = new wxMenuItem( m_menu2, wxID_ANY, wxString( wxT("Modify color codes ...") ) + wxT('\t') + wxT("CTRL+M"), wxEmptyString, wxITEM_NORMAL );	m_menu2->Append( m_menuItem7 );		wxMenuItem* m_menuItem8;	m_menuItem8 = new wxMenuItem( m_menu2, wxID_ANY, wxString( wxT("Set frame limits ...") ) + wxT('\t') + wxT("CTRL+F"), wxEmptyString, wxITEM_NORMAL );	m_menu2->Append( m_menuItem8 );		m_menubar3->Append( m_menu2, wxT("Edit") ); 		this->SetMenuBar( m_menubar3 );		statusbar = this->CreateStatusBar( 2, wxST_SIZEGRIP, wxID_ANY );		this->Centre( wxBOTH );		// Connect Events	m_bitmap1->Connect( wxEVT_ENTER_WINDOW, wxMouseEventHandler( MainWindow::change_cursor ), NULL, this );	m_bitmap1->Connect( wxEVT_LEFT_DOWN, wxMouseEventHandler( MainWindow::activate_pencil ), NULL, this );	m_bitmap1->Connect( wxEVT_LEFT_UP, wxMouseEventHandler( MainWindow::mark_spot ), NULL, this );	m_bitmap1->Connect( wxEVT_MOTION, wxMouseEventHandler( MainWindow::color_position ), NULL, this );	m_bitmap1->Connect( wxEVT_PAINT, wxPaintEventHandler( MainWindow::draw_image ), NULL, this );	this->Connect( m_menuItem1->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::load_image ) );	this->Connect( m_menuItem5->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::load_plume ) );	this->Connect( m_menuItem4->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::save_image ) );	this->Connect( m_menuItem3->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::save_binary ) );	this->Connect( quit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::close_plume ) );	this->Connect( m_menuItem6->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::reset_bitmap ) );	this->Connect( m_menuItem7->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::open_colorcode ) );	this->Connect( m_menuItem8->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::open_framelimits ) );}MainWindow::~MainWindow(){	// Disconnect Events	m_bitmap1->Disconnect( wxEVT_ENTER_WINDOW, wxMouseEventHandler( MainWindow::change_cursor ), NULL, this );	m_bitmap1->Disconnect( wxEVT_LEFT_DOWN, wxMouseEventHandler( MainWindow::activate_pencil ), NULL, this );	m_bitmap1->Disconnect( wxEVT_LEFT_UP, wxMouseEventHandler( MainWindow::mark_spot ), NULL, this );	m_bitmap1->Disconnect( wxEVT_MOTION, wxMouseEventHandler( MainWindow::color_position ), NULL, this );	m_bitmap1->Disconnect( wxEVT_PAINT, wxPaintEventHandler( MainWindow::draw_image ), NULL, this );	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::load_image ) );	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::load_plume ) );	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::save_image ) );	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::save_binary ) );	this->Disconnect( wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::close_plume ) );	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::reset_bitmap ) );	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::open_colorcode ) );	this->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MainWindow::open_framelimits ) );	}